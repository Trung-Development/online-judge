// Programming languages
export const languages = [
  {
    value: "PY2",
    label: "Python 2",
    template: "",
    extension: "py",
    commonName: "Python",
  },
  {
    value: "CPP03",
    label: "C++03",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
  {
    value: "RUBY18",
    label: "Ruby 1.8",
    template: "",
    extension: "rb",
    commonName: "Ruby",
  },
  {
    value: "PHP",
    label: "PHP",
    template: "",
    extension: "php",
    commonName: "PHP",
  },
  {
    value: "PERL",
    label: "Perl",
    template: "",
    extension: "pl",
    commonName: "Perl",
  },
  {
    value: "PY3",
    label: "Python 3",
    template: "",
    extension: "py",
    commonName: "Python",
  },
  {
    value: "C",
    label: "C",
    template: "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "c",
    commonName: "C",
  },
  {
    value: "PAS",
    label: "Pascal",
    template: "",
    extension: "pas",
    commonName: "Pascal",
  },
  {
    value: "CPP11",
    label: "C++11",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
  {
    value: "MONOCS",
    label: "C#",
    template: "",
    extension: "cs",
    commonName: "C#",
  },
  {
    value: "HASK",
    label: "Haskell",
    template: "",
    extension: "hs",
    commonName: "Haskell",
  },
  { value: "GO", label: "Go", template: "", extension: "go", commonName: "Go" },
  {
    value: "PYPY",
    label: "PyPy 2",
    template: "",
    extension: "py",
    commonName: "Python",
  },
  {
    value: "PYPY3",
    label: "PyPy 3",
    template: "",
    extension: "py",
    commonName: "Python",
  },
  {
    value: "F95",
    label: "Fortran",
    template: "",
    extension: "f95",
    commonName: "Fortran",
  },
  {
    value: "NASM",
    label: "NASM",
    template: "",
    extension: "asm",
    commonName: "Assembly",
  },
  {
    value: "RUBY",
    label: "Ruby",
    template: "",
    extension: "rb",
    commonName: "Ruby",
  },
  {
    value: "LUA",
    label: "Lua",
    template: "",
    extension: "lua",
    commonName: "Lua",
  },
  {
    value: "OCAML",
    label: "OCaml",
    template: "",
    extension: "ml",
    commonName: "OCaml",
  },
  {
    value: "TUR",
    label: "Turing",
    template: "",
    extension: "t",
    commonName: "Turing",
  },
  {
    value: "JAVA8",
    label: "Java 8",
    template:
      "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n    }\r\n}",
    extension: "java",
    commonName: "Java",
  },
  {
    value: "V8JS",
    label: "V8 JavaScript",
    template:
      "/* \r\n * This is a custom version of V8 that adds six functions in order to perform I/O and aid in online judging.\r\n *\r\n * * `print(...)`: similar to Python's `print`, prints all argument separated by space followed by new line.\r\n * * `flush()`: flushes stdout, ensuring everything output by `print()` immediately shows up.\r\n * * `gets()`: similar to the Ruby equivalent, returns one line of input from `stdin`.\r\n * * `read(bytes)`: read `bytes` bytes from stdin as an `ArrayBuffer`.\r\n * * `write(buffer)`: write a typed array, `ArrayBuffer`, or a view of `ArrayBuffer` to stdout.\r\n * * `quit(code)`: exits the program with `code`.\r\n * * You can also assign to the global variable `autoflush` to control whether `print()` flushes.\r\n *\r\n */",
    extension: "js",
    commonName: "JS",
  },
  {
    value: "D",
    label: "D",
    template: "import std.stdio;\r\n\r\nvoid main() {\r\n\r\n}",
    extension: "d",
    commonName: "D",
  },
  {
    value: "BF",
    label: "Brain****",
    template: "",
    extension: "c",
    commonName: "Brain****",
  },
  {
    value: "OBJC",
    label: "Objective-C",
    template: "",
    extension: "m",
    commonName: "ObjC",
  },
  {
    value: "CPP14",
    label: "C++14",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
  {
    value: "MONOVB",
    label: "Visual Basic",
    template: "",
    extension: "vb",
    commonName: "VB",
  },
  {
    value: "CLANG",
    label: "Clang",
    template: "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "c",
    commonName: "C",
  },
  {
    value: "CLANGX",
    label: "Clang++",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
  {
    value: "DART",
    label: "Dart",
    template: "",
    extension: "dart",
    commonName: "Dart",
  },
  {
    value: "TCL",
    label: "TCL",
    template: "",
    extension: "tcl",
    commonName: "TCL",
  },
  {
    value: "CBL",
    label: "COBOL",
    template: "",
    extension: "cbl",
    commonName: "COBOL",
  },
  {
    value: "MONOFS",
    label: "F#",
    template: "",
    extension: "fs",
    commonName: "F#",
  },
  {
    value: "SCM",
    label: "Scheme",
    template: "",
    extension: "scm",
    commonName: "Scheme",
  },
  {
    value: "ADA",
    label: "Ada",
    template: "",
    extension: "adb",
    commonName: "Ada",
  },
  {
    value: "AWK",
    label: "AWK",
    template: "",
    extension: "awk",
    commonName: "Awk",
  },
  {
    value: "RUST",
    label: "Rust",
    template:
      '#[macro_use] extern crate dmoj;\r\n\r\nfn main() {\r\n    println!("Hello, World!");\r\n}',
    extension: "rs",
    commonName: "Rust",
  },
  {
    value: "COFFEE",
    label: "CoffeeScript",
    template: "",
    extension: "coffee",
    commonName: "JS",
  },
  {
    value: "PRO",
    label: "Prolog",
    template: "",
    extension: "pl",
    commonName: "Prolog",
  },
  {
    value: "FORTH",
    label: "Forth",
    template: "",
    extension: "fs",
    commonName: "Forth",
  },
  {
    value: "ICK",
    label: "INTERCAL",
    template: "",
    extension: "i",
    commonName: "Intercal",
  },
  {
    value: "TEXT",
    label: "Text",
    template: "",
    extension: "txt",
    commonName: "Text",
  },
  {
    value: "SCALA",
    label: "Scala",
    template:
      "// Must be the same name as the Problem slug\r\nobject problemSlug extends App {\r\n    \r\n}",
    extension: "scala",
    commonName: "Scala",
  },
  {
    value: "SWIFT",
    label: "Swift",
    template: "",
    extension: "swift",
    commonName: "Swift",
  },
  {
    value: "GAS32",
    label: "Assembly (x86)",
    template: "",
    extension: "asm",
    commonName: "Assembly",
  },
  {
    value: "GASARM",
    label: "Assembly (ARM)",
    template: "",
    extension: "asm",
    commonName: "Assembly",
  },
  {
    value: "GAS64",
    label: "Assembly (x64)",
    template: "",
    extension: "asm",
    commonName: "Assembly",
  },
  {
    value: "SED",
    label: "Sed",
    template: "",
    extension: "sed",
    commonName: "Sed",
  },
  {
    value: "JAVA",
    label: "Java",
    template:
      "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n    }\r\n}",
    extension: "java",
    commonName: "Java",
  },
  {
    value: "NASM64",
    label: "NASM64",
    template: "",
    extension: "asm",
    commonName: "Assembly",
  },
  {
    value: "RKT",
    label: "Racket",
    template: "#lang racket",
    extension: "rkt",
    commonName: "Racket",
  },
  {
    value: "GROOVY",
    label: "Groovy",
    template: "",
    extension: "groovy",
    commonName: "Groovy",
  },
  {
    value: "KOTLIN",
    label: "Kotlin",
    template: "",
    extension: "kt",
    commonName: "Kotlin",
  },
  {
    value: "PIKE",
    label: "Pike",
    template: "",
    extension: "pike",
    commonName: "Pike",
  },
  {
    value: "CPP17",
    label: "C++17",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
  {
    value: "SBCL",
    label: "Lisp",
    template: "",
    extension: "cl",
    commonName: "Lisp",
  },
  {
    value: "C11",
    label: "C11",
    template: "#include <stdio.h>\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "c",
    commonName: "C",
  },
  {
    value: "ZIG",
    label: "Zig",
    template: "",
    extension: "zig",
    commonName: "Zig",
  },
  {
    value: "CPP20",
    label: "C++20",
    template:
      "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    return 0;\r\n}",
    extension: "cpp",
    commonName: "C++",
  },
].sort((a, b) => a.label.localeCompare(b.label));
